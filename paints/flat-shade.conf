{
  fragmentTransform = """
    mat4 invMat = inverse(u_viewMatrix);
    vec3 cp = (invMat * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
    vec3 v = normalize(v_viewPosition - cp );
    vec3 lightDir = normalize(vec3(1.0, 1.0, 1.0));
    vec3 reflectDir = reflect(lightDir, normalize(v_worldNormal));

    float spec = pow(max(dot(v, reflectDir), 0.0), 2.0);

    if (p_clip > 0) {
        if (mod(dot(v_worldPosition, p_clipAxis) + p_clipOffset*p_clipLength, p_clipLength) < p_clipDuty * p_clipLength) {
            discard;
        }
    }

    float n = max(0.0, normalize(v_viewNormal).z);
    float f = max(0.0, cos(c_screenPosition.x*p_patternFreq)*cos(c_screenPosition.y*p_patternFreq));

    n *= f * 0.7 + 0.3;

    //x_fill.rgb = pow(x_fill.rgb, vec3(2.2));
    x_fill *= vec4(n, n, n, 1.0);
    //x_fill.rgb += vec3(spec);
    //x_fill.rgb *= (0.5 + 0.5 * step(1.0, mod(v_worldPosition.y*5.0 + v_worldPosition.x*5.0,2.0)) );
    //x_fill.rgb = pow(x_fill.rgb, vec3(1.0/2.2));
  """
  parameters: {
    clip: {
      type: "int"
      keys: ["clip"]
      defaults: [0]
    }

    patternFreq: {
      type: "float"
      keys: ["pattern-freq"]
      defaults: [1.0]
    }

    clipAxis: {
      type: "vec3"
      keys: ["clip-x", "clip-y", "clip-z"]
      defaults: [5.0, 5.0, 0.0]
    }
    clipLength: {
      type: "float"
      keys: ["clip-length"]
      defaults: [1.0]
    }
    clipOffset: {
      type: "float"
      keys: ["clip-offset"]
      defaults: [0.0]
    }
    clipDuty: {
      type: "float"
      keys: ["clip-duty"]
      defaults: [0.5]
    }
  }
}