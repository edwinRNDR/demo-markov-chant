{
  vertexPreamble = """
  vec3 cartesianToSpherical(vec3 cartesian) {
    float radius = length(cartesian);
    float theta = radius == 0.0 ? 0.0 : atan(cartesian.x, cartesian.z);
    float phi = radius == 0.0 ? 0.0 : acos(clamp(cartesian.y / radius, -1.0, 1.0));
    return vec3(theta, phi, radius);
  }

  float evalSH(float theta, float phi, vec4 freqs, vec4 exps) {
    float r = 0.0;
    r += pow(sin(freqs[0] * phi),exps[0]);
    r += pow(cos(freqs[1] * phi),exps[1]);
    r += pow(sin(freqs[2] * theta),exps[2]);
    r += pow(cos(freqs[3] * theta),exps[3]);
    return r;
  }
  """
  vertexTransform = """
    x_modelMatrix *= i_transform;
    x_modelNormalMatrix *= i_transform;

    vec3 p = x_modelMatrix[3].xyz;
    vec3 s = cartesianToSpherical(p);
    s.y += p_time * 0.001;
    s.x += p_time * 0.001;

    float scale = smoothstep(p_count, p_count-400.0, float(c_instance));

    x_position.xy *= 0.01 * scale;
    float r0 = evalSH(s.x, s.y, vec4(4.0, 20.0, 4.0, 20.0), vec4(1.0, 1.0, 1.0, 1.0));
    float r1 = evalSH(s.x, s.y, vec4(10, 2.0, 4.0, 4.0), vec4(1.0, 1.0, 1.0, 1.0));
    float r = mix(r0, r1, cos(p_time*0.4)*0.5+0.5);
    x_position.z *= r*0.2 * scale; //0.1;// * (cos(x_modelMatrix[3][1]*12.0+p_time)*0.5+0.5);
    //x_position.z += cos(p_time*0.1+float(c_instance)*0.01);
    //x_position.z += r*0.0;

  """
  fragmentTransform = """
    float r = length(v_worldPosition) + v_worldPosition.z;;
    if (mod(r*10.0, 1.0) < 0.1) {
      discard;
    }
    float dist = -v_viewPosition.z;
    x_fill.rgb = (v_viewNormal.xyz * 0.5 + vec3(0.5)) *0.5 * (1.0/(1.0+dist*10.0));
  """

  parameters: {

    time: {
      type: "float"
      keys: ["time"]
      defaults: [0.0]
    }
    count: {
      type: "float"
      keys: ["count"]
      defaults: [0.0]
    }
  }
}