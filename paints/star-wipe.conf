{
  fragmentPreamble: """
// signed distance to a n-star polygon, with external angle w
float sdStar(in vec2 p, in float r, in float n, in float w)
{
    // these 5 lines can be precomputed for a given shape
    //float m = n*(1.0-w) + w*2.0;
    float m = n + w*(2.0-n);

    float an = 3.1415927/n;
    float en = 3.1415927/m;
    vec2  racs = r*vec2(cos(an),sin(an));
    vec2   ecs =   vec2(cos(en),sin(en)); // ecs=vec2(0,1) and simplify, for regular polygon,

    // symmetry (optional)
    p.x = abs(p.x);

    // reduce to first sector
    float bn = mod(atan(p.x,p.y),2.0*an) - an;
    p = length(p)*vec2(cos(bn),abs(sin(bn)));

    // line sdf
    p -= racs;
    p += ecs*clamp( -dot(p,ecs), 0.0, racs.y/ecs.y);
    return length(p)*sign(p.x);
}
  """


  fragmentTransform: """
    vec2 uv = (va_texCoord0.xy - vec2(0.5)) * vec2(16.0/9.0, 1.0);
    float d = sdStar(uv, 1.0-p_blend, 8.0, 0.5);

    float sd = smoothstep(-0.1, 0.1, d) + (p_blend - 0.5) * 2.0;

    vec4 a = texture(p_a, va_texCoord0);
    vec4 b = texture(p_b, va_texCoord0);

    x_fill = mix(a, b, sd);
//    x_fill.r = sd;
    x_fill.a = 1.0;
  """

  inputs: {
    a {

    }
    b {
    }
  }

  parameters: {
    blend: {
      type: float
      keys: [blend]
      defaults: [0.5]
    }
  }
}